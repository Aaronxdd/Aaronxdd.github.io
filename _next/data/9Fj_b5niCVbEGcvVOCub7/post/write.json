{"pageProps":{"frontmatter":{"title":"面试题集合（手撕代码篇）","date":"July 5, 2021","description":null},"post":{"content":"\n  \n## 1. 手写 bind、call、apply\n\n``` javascript\n// call\nFunction.prototype.myCall = (content) => {\n  content = content || window;\n  content.fn = this;\n  const args = [...arguments].slice(1);\n  const result = content.fn(args);\n  delete content.fn;\n  return result;\n}\n\n// apply\nFunction.prototype.myApply = (content) => {\n  content = content || window;\n  content.fn = this;\n  let result\n  if (arguments[1] && Array.isArray(arguments[1])) {\n    if (arguments[1].length === 1) {\n      result = content.fn(...arguments[1])\n    } else {\n      result = content.fn()\n    }\n  }\n  delete content.fn\n  return result\n}\n\n// bind\nFunction.prototype.myBind = (content) => {\n  content = content || window;\n  content.fn = this;\n  const args = [...arguments].slice(1);\n  return () => {\n    content.fn(args)\n  }\n}\n```\n\n## 2. 手写防抖节流\n   \n   防抖\n   ``` javascript\n    const debounce = (fn, delay) => {\n      let timeout = null;\n      return () => {\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n        timeout = setTimeout(() => {\n          fn.call(this, arguments)\n        }, delay)\n      }\n    }\n   ```\n   节流\n   ``` javascript\n    const throttle = (fn, delay) => {\n      let canRun = true;\n      if (!canRun) {\n        return\n      }\n      canRun = false;\n      setTimeout(() => {\n        fn.call(this. arguments);\n        canRun = true;\n      }, delay);\n    }\n   ```\n\n## 3. 手写数组flat\n\n``` javascript\nconst flat = arr => {\n  arr.reduce((pre, value) => {\n    return pre.concat(Array.isArray(value) ? flat(value) : value)\n  }, []);\n}\n```\n\n## 4. 写一个 mySetInterVal(fn, a, b),每次间隔 a,a+b,a+2b 的时间，然后写一个 myClear，停止上面的 mySetInterVal\n\n``` javascript\nfunction mySetInterVal(fn, a, b) {\n  this.a = a;\n  this.b = b;\n  this.time = 0;\n  this.handle = -1;\n  this.start = () => {\n    this.handle = setTimeout(() => {\n      fn();\n      this.time++;\n      this.start();\n    }, this.a + this.time * this.b);\n  }\n\n  this.stop = () => {\n    clearTimeout(this.handle);\n    this.time = 0;\n  }\n}\n\nvar a = new mySetInterVal(() => {console.log('123')},1000, 2000 );\na.start();\na.stop();\n```\n\n## 5. 斐波那契数列\n   \n``` javascript\nconst Fibonacci = (n) => {\n  if (n < 0) throw new Error('输入的数字不能小于0');\n  if (n < 2) return n;\n  return Fibonacci(n - 1) + Fibonacci(n - 2)\n}\n```\n   \n## 7. 实现 add(1)(2)(3)\n   \n``` javascript\nconst add = (a) => (b) => (c) => a + b + c;\n```\n\n## 8. 数据类型判断\n\ntypeof 可以正确识别：Undefined、Boolean、Number、String、Symbol、Function 等类型的数据，但是对于其他的都会认为是 object，比如 Null、Date 等，所以通过 typeof 来判断数据类型会不准确。但是可以使用 Object.prototype.toString 实现。\n\n``` javascript\nconst getType = (obj) => {\n  return Object.prototype.toString.call(obj).slice(8, -1);\n}\n```\n\n## 9. 数组扁平化\n    \n数组扁平化就是将 [1, [2, [3]]] 这种多层的数组拍平成一层 [1, 2, 3]。使用 Array.prototype.flat 可以直接将多层数组拍平成一层：\n\n``` javascript\n[1, [2, [3]]].flat(2)  // [1, 2, 3]\n```\n\n关键：递归\n\n``` javascript\nconst flatten = arr => {\n  let newArr = [];\n  for(let i = 0; i < arr.length; i++) {\n    if (Array.isArray(arr[i])) {\n      newArr.concat(flatten(arr[i]))\n      return\n    }\n    newArr.push(arr[i])\n  }\n  return neaArr;\n}\n```\n\n## 10. 深浅拷贝\n\n浅拷贝：只考虑对象类型\n\nES5版\n``` javascript\nfunction shallowCopy(obj) {\n  if (typeof obj !== 'object') return\n\n  let newObj = obj instanceof Array ? [] : {};\n\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      newObj[i] = obj[i];\n    }\n  }\n\n  return newObj;\n}\n```\n\nES6版\n``` javascript\nconst shallowCopy = obj => Array.isArray(obj) ? [...obj] : {...obj}\n```\n\n深拷贝\n\n``` javascript\nconst deepClone = obj => {\n  if (typeof obj !== 'object') return;\n  let newObj = obj instanceof Array ? [] : {};\n  \n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (typeof obj[key] === 'object') {\n        newObj[key] = deepClone(obj[key]);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  return newObj;\n}\n```\n\n## 11. 解析 URL 参数为对象\n  \n``` javascript\nconst urlSearch = href => {\n  let obj = {};\n  const queryIndex = href.indexOf('?');\n  const urlOptions = href.slice(queryIndex + 1, href.length);\n  const options = urlOptions.split('&');\n  options.map(option => {\n    const equalIndex = option.indexOf('=');\n    obj[option.slice(0, equalIndex)] = option.slice(equalIndex + 1, option.length);\n  });\n  return obj;\n}\n```\n\n## 12. 实现柯里化（Currying）\n\n``` javascript\nfunction curry(fn) {\n    let judge = (...args) => {\n        if (args.length == fn.length) return fn(...args)\n        return (...arg) => judge(...args, ...arg)\n    }\n    return judge\n}\n```\n\n## 13. 手写AJAX\n\n``` js\nconst myAjax = (url) => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== 4) return\n      if (xhr.status === 200) {\n        resolve(xhr.responseText)\n      } else {\n        reject(xhr.responseText)\n      }\n    }\n    xhr.send();\n  })\n}\n```\n\n## 14. 手写Promise\n\n``` javascript\nconst PADDING = \"PADDING\";\nconst FULFILLED = \"FULFILLED\";\nconst REJECTED = \"REJECTED\";\n\nclass MyPromise {\n  constructor(executor) {\n    this.status = PADDING;\n    this.value = undefined;\n    this.error = undefined;\n\n    let resolve = (value) => {\n      if (this.status === PADDING) {\n        this.value = value;\n        this.status = FULFILLED;\n      }\n    }\n\n    let reject = (error) => {\n      if (this.status === PADDING) {\n        this.error = error;\n        this.status = REJECTED;\n      }\n    }\n\n    try {\n      executor(resolve, reject)\n    } catch (e) {\n      reject(e);\n    }\n  }\n\n  then(onFulfilled, onRejected) {\n    if (this.status === FULFILLED) {\n      onFulfilled(this.value)\n    }\n\n    if (this.status === REJECTED) {\n      onRejected(this.error)\n    }\n  }\n}\n```\n    \n## 15. 实现 Promise.all\n  \n``` js\nconst promiseAll = (promises) => {\n  if (Array.isArray(promises)) {\n    throw new Error('the arguments must be an array !!!')\n  }\n  const promisesLength = promises.length;\n  let current = 0, result = [];\n  new Promise((resolve, reject) => {\n    promises.forEach((promise, i) => {\n      Promise.resolve(promise).then(value => {\n        current ++;\n        result[i] = value;\n        if (current === promisesLength) {\n          resolve(result)\n        }\n      }, error => reject(error))\n    })\n  })\n}\n```\n\n## 16. 手写模版字符串\n\n``` javascript\nconst render = (str, data) => {\n  const reg = /\\{\\{(\\w+)\\}\\}/;\n  if (reg.test(str)) {\n    const key = reg.exec(str)[1];\n    str = str.replace(reg, data[key]);\n    return render(str, data);\n  }\n  return str;\n} \n```","excerpt":""},"previousPost":{"slug":"framework","frontmatter":{"title":"面试题集合（框架篇）","date":"July 1, 2021","description":null},"excerpt":"","content":"\n## 1. 什么时候使用状态管理器（React）\n\n   - state并不总是以单向的方式线性流动\n   - 存在组件需要更新全局状态\n   - 存在组件需要更新另一个组件的状态\n   - 某个状态需要在全局使用或共享（例如角色权限等信息）\n\n## 2. redux-saga和redux-thunk有什么本质的区别\n\n**redux-thunk** 中 **dispatch** 可以接受一个函数作为参数，而 **redux-saga** 其实和原始的 **redux** 保持一致，**dispatch** 的只是一个对象(plain object),异步是通过saga文件中的 **generator** 函数来处理的\n\n## 3. React 项目中有哪些细节可以优化？实际开发中都做过哪些性能优化\n   \n  - 优化资源加载（减少http请求，采用CDN静态资源，小图片base64）\n  - 首屏考虑SSR\n  - 图片使用懒加载\n  - 相关资源的预加载\n  - 关于可视化的显示可以加入骨架\n  - 分chunk实现动态加载组件\n  - Service worker做缓存\n  - 开发中遍历要给组件加key\n  - css勿嵌套多层\n  - 不必要的dom标签用Fragments\n  - 考虑redux的必要性\n  \n## 4. react 最新版本解决了什么问题 加了哪些东西\n## 5. React 事件绑定原理\n   \nReact并不是将click事件绑在该div的真实DOM上，而是在document处监听所有支持的事件，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。\n\n另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用 event.preventDefault。\n\n## 6. webpack 做过哪些优化，开发效率方面、打包策略方面等等\n   \n   [查看答案](https://github.com/lgwebdream/FE-Interview/issues/25)\n\n## 7. 说一下 react-fiber\n   [查看答案](https://github.com/lgwebdream/FE-Interview/issues/33)\n\n## 8. React 18的新特性\n\n  - 新的 **ReactDOM.createRoot()** API（替换 **ReactDOM.render()**）\n  - 新的 **startTransition** API（用于非紧急状态更新）\n  - 渲染的自动批处理优化（主要解决异步回调中无法批处理的问题）\n  - 支持 **React.lazy** 的 全新 SSR 架构（支持 **<Suspense>** 组件）\n\n## 9. React 开发Tips\n\n官方文档即是最佳实践\n\n1. 尽量使用 react 高版本进行开发\n     - fiber 组件更新的优势\n     - 各种官方 hook 的使用（useMemo，useCallback）\n     - 等等\n\n2. 数组遍历渲染时，key的正确使用\n3. Fragment 的使用\n4. Suspense 和 lazy 的搭配使用（懒加载）\n5. 代码的提取（HOC，手写hook）\n6. 合理使用状态管理（Redux，Context）"},"nextPost":{"slug":"questions","frontmatter":{"title":"面试题集合（真题篇）","date":"July 5, 2021","description":null},"excerpt":"","content":"\n## 1. 性能优化 ：项⽬⾥做过哪些性能优化，怎么检测性能，有没有实际测过优化的数据有多少提升\n  ![性能优化](performance.jpeg)\n\n### 性能优化\n\n- 避免过多的回流与重绘\n  \n  实质上是避免过多的 **render tree** 操作，避免使用table布局；DOM结构避免嵌套过深\n\n- JavaScript、Css、Html压缩\n- splitChunks 拆包\n- 网页中可视化部分（图片，视频等）采用骨架\n- 函数的频繁调用考虑使用防抖节流\n- 多利用缓存（多跟服务器端有关）\n- 大的基础库使用CDN\n- 用上懒加载和预加载\n- 使用Service Worker\n  \n### 检测性能\n\n- 很直观的看network页面的load时间\n- lighthouse进行检测\n- 用webpack-bundle-analyzer查看打包后资源情况\n  \n## 2. http2.0有哪些特性？https是怎么加密的，https强缓存在项目中怎么用的\n\n### http2.0的特性\n- 二进制分帧\n\n  HTTP 1.x 的解析是基于文本，HTTP 2之后将所有传输的信息分割为更小的消息和帧，并对它们采用二进制格式的编码，提高传输效率\n\n- 多路复用\n  \n  一次链接成功后，只要链接还没断开，那么 client 端就可以在一个链接中**并发**地发起多个请求，每个请求及该请求的响应不需要等待其他的请求，某个请求任务耗时严重，不会影响到其它连接的正常执行\n\n- 头部压缩\n  \n  由于 HTTP 是无状态的，每一个请求都需要头部信息标识这次请求相关信息，所以会造成传输很多重复的信息，当请求数量增大的时候，消耗的资源就会慢慢积累上去。所以 HTTP 2 可以维护一个头部信息字典，差量进行更新头信息，减少头部信息传输占用的资源\n\n### HTTP 与 HTTPS\n\n- HTTP 是明文传输，HTTPS 通过 SSL\\TLS 进行了加密\n- HTTP 的端口号是 80，HTTPS 是 443\n- HTTPS 需要到 CA 申请证书，一般免费证书很少，需要交费\n- HTTPS 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全。\n\n### 浏览器缓存策略\n\n## 3. web安全（xss/csrf）\n\n### xss（Cross-Site Scripting）\n\n**定义**\n\n跨站脚本攻击，简称脚本注入\n\n**原理**\n\n恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。\n\n**防范**\n\n- HttpOnly 防止劫取 Cookie，浏览器将禁止页面的Javascript 访问带有 HttpOnly 属性的Cookie。\n- 输入检查，对 **<**  、 **>** 进行转译，使得恶意的脚本内容无法执行（React DOM 会在渲染的时候把内容（字符串）进行转义）\n\n\n### csrf\n\n**定义**\n\n跨站请求伪造，是一种劫持受信任用户向服务器发送非预期请求的攻击方式\n\n**原理**\n\n利用同域下cookie可以共享，在A页面中嵌入B页面的请求，如果用户登录过B页面，即在A中的B请求可以获取B服务器信任。\n\n**防范**\n\n- Token验证\n"}},"__N_SSG":true}
{"pageProps":{"frontmatter":{"title":"面试题集合（框架篇）","date":"June 30, 2021","description":null},"post":{"content":"\n1. 什么时候使用状态管理器（React）\n\n- state并不总是以单向的方式线性流动\n- 存在组件需要更新全局状态\n- 存在组件需要更新另一个组件的状态\n- 某个状态需要在全局使用或共享（例如角色权限等信息）\n\n2. redux-saga和redux-thunk有什么本质的区别\n\n**redux-thunk** 中 **dispatch** 可以接受一个函数作为参数，而 **redux-saga** 其实和原始的 **redux** 保持一致，**dispatch** 的只是一个对象(plain object),异步是通过saga文件中的 **generator** 函数来处理的","excerpt":""},"previousPost":{"slug":"http","frontmatter":{"title":"面试题集合（网络篇）","date":"June 30, 2021","description":null},"excerpt":"","content":"\n1. TCP/IP 四层网络模型\n\n第一层：应用层，主要有负责web浏览器的 **HTTP** 协议， 文件传输的 **FTP** 协议，负责电子邮件的 **SMTP** 协议，负责域名系统的 **DNS** 等。\n第二层：传输层，主要是有可靠传输的 **TCP** 协议，特别高效的 **UDP** 协议。主要负责传输应用层的数据包。\n第三层：网络层，主要是 **IP** 协议。主要负责寻址（找到目标设备的位置）\n第四层：数据链路层，主要是负责转换数字信号和物理二进制信号。\n\n2. 用户输入url到页面展示的过程"},"nextPost":{"slug":"easy","frontmatter":{"title":"算法题（简单系列）","date":"June 30, 2021","description":null},"excerpt":"","content":"\n### 1. 两数之和\n\n#### 题目描述\n\n给定一个整数数组 **nums** 和一个目标值 **target**，请你在该数组中找出和为目标值的那 **两个** 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n#### 示例\n\n``` js\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n````\n\n#### 代码实现\n\n``` javascript\nconst findTotal = (nums, target) => {\n  for(let i = 0; i < nums.length; i++) {\n    if (nums.includes(target-nums[i])) {\n      return [i, nums.indexOf(target-nums[i])];\n    }\n  }\n}\n```\n\n"}},"__N_SSG":true}